name: CI

on:
    push:
        paths:
            - "**"

jobs:
    test:
        name: Test (Frontend + Backend)
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Setup Node.js (Frontend)
              uses: actions/setup-node@v4
              with:
                  node-version: "20.18.0"
                  cache: npm
                  cache-dependency-path: frontend/package-lock.json

            - name: Install frontend dependencies
              run: npm install
              working-directory: frontend

            - name: Test frontend
              run: npm run test
              working-directory: frontend
              id: test_frontend

            - name: Setup Node.js (Backend)
              uses: actions/setup-node@v4
              with:
                  node-version: "20.18.0"
                  cache: npm
                  cache-dependency-path: backend/package-lock.json

            - name: Install backend dependencies
              run: npm install
              working-directory: backend

            - name: Test backend
              run: npm run test
              working-directory: backend
              id: test_backend

    analyze:
        name: Analyze code quality
        runs-on: ubuntu-latest
        needs: test

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Setup Node.js (Frontend)
              uses: actions/setup-node@v4
              with:
                  node-version: "20.18.0"
                  cache: npm
                  cache-dependency-path: frontend/package-lock.json

            - name: Install frontend dependencies
              run: npm install
              working-directory: frontend

            - name: Setup Node.js (Backend)
              uses: actions/setup-node@v4
              with:
                  node-version: "20.18.0"
                  cache: npm
                  cache-dependency-path: backend/package-lock.json

            - name: Install backend dependencies
              run: npm install
              working-directory: backend

            - name: SonarQube Scan
              uses: SonarSource/sonarqube-scan-action@v5
              env:
                  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
                  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
              with:
                  args: >
                      -Dsonar.projectKey=ValRoss132_DevOps_lab_3813d1ae-60db-49c3-8c24-2ab33c4c3bcf
                      -Dsonar.sources=frontend/src,backend/src
                      -Dsonar.javascript.lcov.reportPaths=frontend/coverage/lcov.info,backend/coverage/lcov.info
                      -Dsonar.exclusions=**/__test__/**,**/*.test.ts,**/*.test.js,**/*.test.tsx,**/*.test.jsx,backend/src/config.ts,backend/src/config/db.config.ts,frontend/src/setupTests.ts,**/index.ts,**/server.ts,**/websocket.ts,backend/src/middlewares/auth.middlewares.ts,backend/src/routes/auth.routes.ts
              id: sonar_scan

            - name: SonarQube Quality Gate
              uses: SonarSource/sonarqube-quality-gate-action@v1
              timeout-minutes: 5
              env:
                  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
              continue-on-error: false
              id: sonar_quality_gate

    build:
        name: Build (Frontend + Backend)
        runs-on: ubuntu-latest
        needs: analyze

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Setup Node.js (Frontend)
              uses: actions/setup-node@v4
              with:
                  node-version: "20.18.0"
                  cache: npm
                  cache-dependency-path: frontend/package-lock.json

            - name: Install frontend dependencies
              run: npm install
              working-directory: frontend

            - name: Build frontend
              run: npm run build
              working-directory: frontend

            - name: Setup Node.js (Backend)
              uses: actions/setup-node@v4
              with:
                  node-version: "20.18.0"
                  cache: npm
                  cache-dependency-path: backend/package-lock.json

            - name: Install backend dependencies
              run: npm install
              working-directory: backend

            - name: Build backend
              run: npm run build
              working-directory: backend

    paths-filter:
        runs-on: ubuntu-latest
        outputs:
            backend: ${{ steps.filter.outputs.backend }}
            frontend: ${{ steps.filter.outputs.frontend }}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  persist-credentials: false
            - name: Ensure full git history
              run: git pull --unshallow || true
            - uses: dorny/paths-filter@v3
              id: filter
              with:
                  filters: |
                      backend:
                        - 'backend/**'
                      frontend:
                        - 'frontend/**'

    docker-publish-backend:
        name: Build & Push Multi-Arch Docker Image (backend)
        runs-on: ubuntu-latest
        needs: [build, paths-filter]
        if: needs.paths-filter.outputs.backend == 'true'

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Set up QEMU
              uses: docker/setup-qemu-action@v3

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Login to DockerHub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Build and push multi-arch image (backend)
              uses: docker/build-push-action@v5
              with:
                  context: ./backend
                  file: ./backend/Dockerfile
                  push: true
                  tags: valross132/devops-backend:latest
                  platforms: linux/amd64,linux/arm64

    docker-publish-frontend:
        name: Build & Push Multi-Arch Docker Image (frontend)
        runs-on: ubuntu-latest
        needs: [build, paths-filter]
        if: needs.paths-filter.outputs.frontend == 'true'

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Set up QEMU
              uses: docker/setup-qemu-action@v3

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Login to DockerHub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Build and push multi-arch image (frontend)
              uses: docker/build-push-action@v5
              with:
                  context: ./frontend
                  file: ./frontend/Dockerfile
                  push: true
                  tags: valross132/devops-frontend:latest
                  platforms: linux/amd64,linux/arm64

    notify:
        name: Send Telegram Notification
        runs-on: ubuntu-latest
        needs: [test, analyze, build, docker-publish-backend, docker-publish-frontend, deploy]
        if: always()

        steps:
            - name: Send Telegram Notification
              run: |
                  # Проверяем успешность обязательных этапов
                  REQUIRED_SUCCESS=true

                  # Test этап
                  if [[ "${{ needs.test.result }}" != 'success' ]]; then
                    REQUIRED_SUCCESS=false
                  fi

                  # Analyze этап
                  if [[ "${{ needs.analyze.result }}" != 'success' ]]; then
                    REQUIRED_SUCCESS=false
                  fi

                  # Build этап
                  if [[ "${{ needs.build.result }}" != 'success' ]]; then
                    REQUIRED_SUCCESS=false
                  fi

                  # Docker Push и Deploy этапы проверяем только если они не были пропущены
                  if [[ "${{ needs.docker-publish-backend.result }}" != '' && "${{ needs.docker-publish-backend.result }}" != 'skipped' && "${{ needs.docker-publish-backend.result }}" != 'success' ]]; then
                    REQUIRED_SUCCESS=false
                  fi

                  if [[ "${{ needs.docker-publish-frontend.result }}" != '' && "${{ needs.docker-publish-frontend.result }}" != 'skipped' && "${{ needs.docker-publish-frontend.result }}" != 'success' ]]; then
                    REQUIRED_SUCCESS=false
                  fi

                  if [[ "${{ needs.deploy.result }}" != '' && "${{ needs.deploy.result }}" != 'skipped' && "${{ needs.deploy.result }}" != 'success' ]]; then
                    REQUIRED_SUCCESS=false
                  fi

                  # Определяем общий статус
                  if [[ "$REQUIRED_SUCCESS" == "true" ]]; then
                    STATUS="✅ CI Workflow успешно завершен"
                  else
                    STATUS="❌ CI Workflow завершен с ошибками"
                  fi

                  # Формируем детальный отчет
                  STEPS=""
                  STEPS+=$'\n- Test Frontend/Backend: '
                  if [[ "${{ needs.test.result }}" == 'success' ]]; then
                    STEPS+='✅'
                  else
                    STEPS+='❌'
                  fi

                  STEPS+=$'\n- Code Analysis: '
                  if [[ "${{ needs.analyze.result }}" == 'success' ]]; then
                    STEPS+='✅'
                  else
                    STEPS+='❌'
                  fi

                  STEPS+=$'\n- Build Frontend/Backend: '
                  if [[ "${{ needs.build.result }}" == 'success' ]]; then
                    STEPS+='✅'
                  else
                    STEPS+='❌'
                  fi

                  # Docker Push этапы показываем только если они запускались
                  if [[ "${{ needs.docker-publish-backend.result }}" != '' && "${{ needs.docker-publish-backend.result }}" != 'skipped' ]]; then
                    STEPS+=$'\n- Docker Push Backend: '
                    if [[ "${{ needs.docker-publish-backend.result }}" == 'success' ]]; then
                      STEPS+='✅'
                    else
                      STEPS+='❌'
                    fi
                  fi

                  if [[ "${{ needs.docker-publish-frontend.result }}" != '' && "${{ needs.docker-publish-frontend.result }}" != 'skipped' ]]; then
                    STEPS+=$'\n- Docker Push Frontend: '
                    if [[ "${{ needs.docker-publish-frontend.result }}" == 'success' ]]; then
                      STEPS+='✅'
                    else
                      STEPS+='❌'
                    fi
                  fi

                  # Deploy этап показываем только если он запускался
                  if [[ "${{ needs.deploy.result }}" != '' && "${{ needs.deploy.result }}" != 'skipped' ]]; then
                    STEPS+=$'\n- Deploy Applications: '
                    if [[ "${{ needs.deploy.result }}" == 'success' ]]; then
                      STEPS+='✅'
                    else
                      STEPS+='❌'
                    fi
                  fi

                  MESSAGE="${STATUS}${STEPS}
                  Ссылка на GitHub Actions: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

                  curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
                  -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
                  -d text="$MESSAGE"
              if: always()

    deploy:
        name: Deploy to Kubernetes
        runs-on: ubuntu-latest
        needs: [docker-publish-backend, docker-publish-frontend]
        if: |
            always() &&
            (needs.docker-publish-backend.result == 'success' ||
             needs.docker-publish-frontend.result == 'success')

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Setup kubectl
              uses: azure/setup-kubectl@v3
              with:
                  version: "latest"

            - name: Set up kubeconfig
              run: |
                cat << EOF > kubeconfig
                apiVersion: v1
                clusters:
                - cluster:
                    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM1ekNDQWMrZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJMU1EVXhOekUxTlRReU5Wb1hEVE0xTURVeE5URTFOVFF5TlZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTzVsCkd1ZC9oWmkxM0FpcVBvSTFpOE96K0c4N3p3aTRneFZVcCtRTGpkUVo1eGF6ZGJBZGdnQXNteUVGTWNBbVdQYTEKaDEyNVphNjFWQnFzTVRNQmRaNVZGUno4LzduK0pPa3ZuN3ZZcmNHam9JQWc5SGh6YzZoNkh4Q2VuVThFVXFnVwpWV1pRQ2tUd0F4WUxoQXE3OTJJdC8zMGk0eGV6dUUxNDJ3eWNxcEFxQk9MSndyb0hQZmFrRnh4QkxOdmY3b1VCCkZWNGRCMDNnTU1sMFpWaG4weEVqeklQb0RnZjk2QUx5MnRGTWJmbXEwWGhsMTZVWk9jU2ZvckxER1ExV1BrT1oKQ2d3SVNlOVc0ZnMxb0pya0RLa0w4eVJHcU9wcjhJT2VpQmYvY2JhbSt6emxUZUZRVW52aEtobWhNU1B2b1FYTQpKRDFSWndkWFV1YmFuTk1mTjVzQ0F3RUFBYU5DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZDZC9Sd01aK1RoVzdDa0YxZ0toSkg0K3BNZW5NQTBHQ1NxR1NJYjMKRFFFQkN3VUFBNElCQVFDZVQxaDJRdzUyU25HcTYvdmdpZjFZaDJLWFAzc2doS3JRd2dneGJVQkQ1aXNzdE5RWAoxL0M4dWVia1ZLbzBocm0xSWx3eEJmSS9XS0R5M0I3eVh2MlBzQkNiaGdYQUtYOFVFcEovMGJXcGNtNzhKenpYCjRtZlNNbDFjWnNlcHFoLzlSSmxBVmRDVFJwcUlUaHlpSi94QnAzSWFCcEMvN1NjTTdlTjloVzAwR3FFK2FnVm0KQk91aE5IU1prbTl6RmdDbGoyL29MNVJHN21najZTaWN6WVdMQ0FaNUdjbS9GZGlOc0ZwTVBQWkdobHl6VUg0NgpIaTVuUEJCdzcycS9UNVJqcFVCWWZNTjNsU25ZaWMrODhRYTlUZW9sc0t0S2pXZ1NQbHFXVEpyRHFHditTNXRQCmlpdHdYOHRNZjBxWWRYalRWZnZHS1BSMjZVTTRuVWRIM1RSMQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
                    server: https://130.193.57.101
                  name: yc-managed-k8s-cat0ukd4cigqqlhds5it
                contexts:
                - context:
                    cluster: yc-managed-k8s-cat0ukd4cigqqlhds5it
                    user: yc-managed-k8s-cat0ukd4cigqqlhds5it
                  name: yc-devops-cluster
                current-context: yc-devops-cluster
                kind: Config
                preferences: {}
                users:
                - name: yc-managed-k8s-cat0ukd4cigqqlhds5it
                  user:
                    token: ${{ secrets.YC_TOKEN }}
                EOF
                chmod 600 kubeconfig

            - name: Verify cluster connection
              run: |
                export KUBECONFIG=$PWD/kubeconfig
                kubectl cluster-info
                kubectl get nodes

            - name: Deploy Backend
              if: needs.docker-publish-backend.result == 'success'
              run: |
                export KUBECONFIG=$PWD/kubeconfig
                kubectl apply -f backend-deployment.yaml
                kubectl apply -f backend-hpa.yaml
                # Принудительный перезапуск подов бэкенда
                kubectl rollout restart deployment backend-deployment
                # Ждем завершения развертывания
                kubectl rollout status deployment backend-deployment --timeout=3m

            - name: Deploy Frontend
              if: needs.docker-publish-frontend.result == 'success'
              run: |
                export KUBECONFIG=$PWD/kubeconfig
                kubectl apply -f frontend-deployment.yaml
                # Принудительный перезапуск подов фронтенда
                kubectl rollout restart deployment frontend-deployment
                # Ждем завершения развертывания
                kubectl rollout status deployment frontend-deployment --timeout=3m
